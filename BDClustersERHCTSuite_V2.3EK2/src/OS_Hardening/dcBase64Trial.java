package OS_Hardening;

import java.io.IOException;

import javax.mail.MessagingException;

import dcModelClasses.Base64Str;


public class dcBase64Trial {

	public static void main(String[] args) throws MessagingException, IOException {	
	
		
//		String testStr = "Hello World!";
//		//byte[]   bytesEncoded = Base64.encodeBase64(testStr.getBytes());
//		String base64EncodedStr = Base64Str.getEncodedString(testStr);
//		System.out.println("\n*** base64EncodedStr for " + testStr + " is: " + base64EncodedStr);
//		
//		String testStr2 = "SGVsbG8gV29ybGQh"; //"Hello World!"; 
//		//byte[] valueDecoded= Base64.decodeBase64(testStr2.getBytes());
//		String base64DecodedStr = Base64Str.getDecodedString(testStr2);
//		System.out.println("\n*-* base64DecodedStr for " + testStr2 + " is: " + base64DecodedStr);
//
//		String testStr3 = "Y2ZhOmFkZHJlc3M=";
//		System.out.println("\n*-* base64DecodedStr for " + testStr3 + " is: " + Base64Str.getDecodedString(testStr3));
//		
//		String testStr4 = "MTAy"; //"Y2ZhOnNhbGFyeQ=="; //Y2ZhOnNhbGFyeQ==..VGV4YXM=..MTAy
//		System.out.println("\n*-* base64DecodedStr for " + testStr4 + " is: " + Base64Str.getDecodedString(testStr4));
//		
//		
//		String testStr5 = "L1N0cnVjdHVyZURlZmluaXRpb24vU3RydWN0dXJlRGVmaW5pdGlvbg==";
//		System.out.println("\n*-* base64DecodedStr for " + testStr5 + " is: " + Base64Str.getDecodedString(testStr5));
		
		String testStr6 = "<StructureDefinition>    <id value="StructureDefinition"/>    <meta>        <versionId value="1441978062896"/>        <lastUpdated value="2015-09-11T08:27:42.896-05:00"/>        <profile value="http://registry-fhir.mayo.edu/StructureDefinition/StructureDefinition"/>    </meta>    <text>        <status value="generated"/>        <div xmlns="http://www.w3.org/1999/xhtml">            <table border="0" cellpadding="0" cellspacing="0" style="border: 0px; font-size: 11px; font-family: verdana; vertical-align: top;">                <tr style="border: 1px #F0F0F0 solid; font-size: 11px; font-family: verdana; vertical-align: top;">                    <th class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="formats.html#table" title="The logical name of the element">Name</a>                    </th>                    <th class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="formats.html#table" title="Information about the use of the element">Flags</a>                    </th>                    <th class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="formats.html#table" title="Minimum and Maximum # of times the the element can appear in the instance">Card.</a>                    </th>                    <th class="heirarchy" style="width: 100px">                        <a href="formats.html#table" title="Reference to the type of the element">Type</a>                    </th>                    <th class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="formats.html#table" title="Additional information about the element">Description &amp; Constraints</a>                        <span style="float: right">                            <a href="formats.html#table" title="Legend for this format">                                <img alt="doco" src="help16.png"/>                            </a>                        </span>                    </th>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJBSURBVDjLhdKxa5NBGMfx713yvkmbJnaoFiSF4mJTh06Kg4OgiyCCRXCof4YIdXdxFhQVHPo3OFSoUx0FySQttaVKYq2NbdO8ed/L3fM4JG3tYPvAcfBw9+HHPWdUlf/V0tLSqKo+EpEHInJFRIohhDUR+RBCeDM7O7ua55QSkRfVanVufHyckZERrLV0Op2Zra2tmXq9fg+YsmcAdyYnJykUCke9OI6ZmJgghHAZ4KwE3ntPs9mkVCohIjQaDWq1GiEEAM5KoHEcY62lVCrRarUoFotUKpUjIL/y/uqXYmV62ph/LSVrr30P4bEFcM4B0Ov1jk547/uAUTs1ceNdZIwB7V/GGHz6+9LXxY96eDiEgHMOY8xJAK8p4grZz5cElwNbwZgyxYu3EFM01lriOCZJEqIoIooiALIsGwA9Y1UcwcWoKNLdpLu9zvbnBWqNBhuvn5EDUmB0EH/1E2TZw5U+YLQovkun+Ytsaw1xCbnCOap334LC7s4Oe/ttvA+ICLmhMXRxDufczUECS37oAuevPwUEVFFp4/eXkXSdYc2IopSepnjtUh5/wg9gfn6+OQBUNaRIUkfDHhraSLoBKqikIF3yHJDLHaAkFOLciVHnyVAVj/S2Ub/XRyQD9aAZKgkaOohvo6ENgykcA07VEFDfQv1uf4W9Y8y30bCPhg4qKZJtMnjTPqBO/vhkZ7h3EJeRslWNQMqgY2jIAIfa/m5sIKSpqpPsGEiz599e3b+GchtD+bSvjQJm2SG6cNj6C+QmaxAek5tyAAAAAElFTkSuQmCC" style="background-color: white;" title="Resource"/>                        <span title="StructureDefinition : A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.">StructureDefinition</span>                        <a name="StructureDefinition"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element has or is affected by some invariants">I</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px"/>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="domainresource.html">DomainResource</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Structural Definition                         <br/>                        <span style="font-style: italic" title="sdf-5">If the type is 'extension' then the structure must have context information</span>                        <br/>                        <span style="font-style: italic" title="sdf-4">A structure must have a base unless it?s type is 'abstract'</span>                        <br/>                        <span style="font-style: italic" title="sdf-7">If the type is Resource or Type, the url has to start with "http://hl7.org/fhir/StructureDefinition/" and the tail must match the name</span>                        <br/>                        <span style="font-style: italic" title="sdf-6">A structure must have either a differential, or a snapshot (or both)</span>                        <br/>                        <span style="font-style: italic" title="sdf-8">In any snapshot or differential, all the elements except the first have to have a path that starts with the path of the first + "."</span>                    </td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.url : An absolute URL at which this StructureDefinition is (or will be) published, and which is used to reference this StructureDefinition in extension urls and tag values in operational FHIR systems.">url</span>                        <a name="StructureDefinition.url"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">1..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#uri">uri</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Literal URL used to reference this StructureDefinition</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,R0lGODlhEAAQAOZ/APrkusOiYvvfqbiXWaV2G+jGhdq1b8GgYf3v1frw3vTUlsWkZNewbcSjY/DQkad4Hb6dXv3u0f3v1ObEgfPTlerJiP3w1v79+e7OkPrfrfnjuNOtZPrpydaxa+/YrvvdpP779ZxvFPvnwKKBQaFyF/369M2vdaqHRPz58/HNh/vowufFhfroxO3OkPrluv779tK0e6JzGProwvrow9m4eOnIifPTlPDPkP78+Naxaf3v0/zowfXRi+bFhLWUVv379/rnwPvszv3rye3LiPvnv+3MjPDasKiIS/789/3x2f747eXDg+7Mifvu0tu7f+/QkfDTnPXWmPrjsvrjtPbPgrqZW+/QlPz48K2EMv36866OUPvowat8Ivvgq/Pbrvzgq/PguvrgrqN0Gda2evfYm9+7d/rpw9q6e/LSku/Rl/XVl/LSlfrkt+zVqe7Wqv3x1/bNffbOf59wFdS6if3u0vrqyP3owPvepfXQivDQkO/PkKh9K7STVf779P///////yH5BAEAAH8ALAAAAAAQABAAAAfNgH+Cg36FfoOIhH4JBxBghYl/hQkNAV0IVT5GkJKLCwtQaSsSdx9aR26Gcwt2IkQaNRI6dBERIzCFDSgWSW8WCDkbBnoOQ3uFARc/JQJfCAZlT0x4ZFyFBxdNQT9ZCBNWKQoKUQ+FEDgcdTIAV14YDmg2CgSFA0hmQC5TLE4VRTdrKJAoxOeFCzZSwsw4U6BCizwUQhQyEaAPiAwCVNCY0FCNnA6GPAwYoETIFgY9loiRA4dToTYnsOxg8CBGHE6ICvEYQ4AKzkidfgoKBAA7" style="background-color: white;" title="Data Type"/>                        <span title="StructureDefinition.identifier : Formal identifier that is used to identify this StructureDefinition when it is represented in other formats, or referenced in a specification, model, design or an instance (should be globally unique OID, UUID, or URI), (if it's not possible to use the literal URI).">identifier</span>                        <a name="StructureDefinition.identifier"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..*</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#Identifier">Identifier</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Other identifiers for the StructureDefinition</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.version : The identifier that is used to identify this version of the StructureDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the StructureDefinition author manually.">version</span>                        <a name="StructureDefinition.version"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#string">string</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Logical id for this version of the StructureDefinition</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.name : A free text natural language name identifying the StructureDefinition.">name</span>                        <a name="StructureDefinition.name"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">1..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#string">string</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Informal name for this StructureDefinition</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,R0lGODlhEAAQAOZ/APrkusOiYvvfqbiXWaV2G+jGhdq1b8GgYf3v1frw3vTUlsWkZNewbcSjY/DQkad4Hb6dXv3u0f3v1ObEgfPTlerJiP3w1v79+e7OkPrfrfnjuNOtZPrpydaxa+/YrvvdpP779ZxvFPvnwKKBQaFyF/369M2vdaqHRPz58/HNh/vowufFhfroxO3OkPrluv779tK0e6JzGProwvrow9m4eOnIifPTlPDPkP78+Naxaf3v0/zowfXRi+bFhLWUVv379/rnwPvszv3rye3LiPvnv+3MjPDasKiIS/789/3x2f747eXDg+7Mifvu0tu7f+/QkfDTnPXWmPrjsvrjtPbPgrqZW+/QlPz48K2EMv36866OUPvowat8Ivvgq/Pbrvzgq/PguvrgrqN0Gda2evfYm9+7d/rpw9q6e/LSku/Rl/XVl/LSlfrkt+zVqe7Wqv3x1/bNffbOf59wFdS6if3u0vrqyP3owPvepfXQivDQkO/PkKh9K7STVf779P///////yH5BAEAAH8ALAAAAAAQABAAAAfNgH+Cg36FfoOIhH4JBxBghYl/hQkNAV0IVT5GkJKLCwtQaSsSdx9aR26Gcwt2IkQaNRI6dBERIzCFDSgWSW8WCDkbBnoOQ3uFARc/JQJfCAZlT0x4ZFyFBxdNQT9ZCBNWKQoKUQ+FEDgcdTIAV14YDmg2CgSFA0hmQC5TLE4VRTdrKJAoxOeFCzZSwsw4U6BCizwUQhQyEaAPiAwCVNCY0FCNnA6GPAwYoETIFgY9loiRA4dToTYnsOxg8CBGHE6ICvEYQ4AKzkidfgoKBAA7" style="background-color: white;" title="Data Type"/>                        <span title="StructureDefinition.useContext : The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of structure definitions.">useContext</span>                        <a name="StructureDefinition.useContext"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..*</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#CodeableConcept">CodeableConcept</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Content intends to support these contexts                         <br/>                        <a href="valueset-use-context.html" title="Indicates the countries, regions, disciplines and other aspects of use this artifact is targeted for use within">ConformanceUseContext</a> (                         <a href="terminologies.html#extensible" title="To be conformant, instances of this element SHALL include a code from the specified value set if any of the codes within the value set can apply to the concept being communicated. If the valueset does not cover the concept (based on human review), alternate codings (or, data type allowing, text) may be included instead.">Extensible</a>)                     </td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.display : Defined so that applications can use this name when displaying the value of the extension to the user.">display</span>                        <a name="StructureDefinition.display"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#string">string</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Use this name when displaying the value</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.publisher : The name of the individual or organization that published the structure definition.">publisher</span>                        <a name="StructureDefinition.publisher"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#string">string</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Name of the publisher (Organization or individual)</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,R0lGODlhEAAQAMQfAOvGUf7ztuvPMf/78/fkl/Pbg+u8Rvjqteu2Pf3zxPz36Pz0z+vTmPzurPvuw/npofbjquvNefHVduuyN+uuMu3Oafbgjfnqvf/3zv/3xevPi+vRjP/20/bmsP///////yH5BAEAAB8ALAAAAAAQABAAAAV24CeOZGmepqeqqOgxjBZFa+19r4ftWQUAgqDgltthMshMIJAZ4jYDHsBARSAmFOJvq+g6HIdEFgcYmBWNxoNAsDjGHgBnmV5bCoUDHLBIq9sFEhIdcAYJdYASFRUQhQkLCwkOFwcdEBAXhVabE52ecDahKy0oIQA7" style="background-color: white;" title="Element"/>                        <span title="StructureDefinition.contact : Contacts to assist a user in finding and communicating with the publisher.">contact</span>                        <a name="StructureDefinition.contact"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..*</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="element.html">Element</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Contact details of the publisher</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAE0lEQVR42mP4/x0IaQwY/tMBAACSBMcpuec9bgAAAABJRU5ErkJggg==)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQEfT9fq3QAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAALElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2jNowasOgtgEAYt8nG43rdKUAAAAASUVORK5CYII="/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.contact.name : The name of an individual to contact regarding the structure definition.">name</span>                        <a name="StructureDefinition.contact.name"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#string">string</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Name of a individual to contact</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQEfT9fq3QAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAALElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2jNowasOgtgEAYt8nG43rdKUAAAAASUVORK5CYII="/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQcJ7Vn4CgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMklEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASVLPhlENoxpI1wAA9XMVKngLMyMAAAAASUVORK5CYII="/>                        <img alt="." class="heirarchy" src="data: image/png;base64,R0lGODlhEAAQAOZ/APrkusOiYvvfqbiXWaV2G+jGhdq1b8GgYf3v1frw3vTUlsWkZNewbcSjY/DQkad4Hb6dXv3u0f3v1ObEgfPTlerJiP3w1v79+e7OkPrfrfnjuNOtZPrpydaxa+/YrvvdpP779ZxvFPvnwKKBQaFyF/369M2vdaqHRPz58/HNh/vowufFhfroxO3OkPrluv779tK0e6JzGProwvrow9m4eOnIifPTlPDPkP78+Naxaf3v0/zowfXRi+bFhLWUVv379/rnwPvszv3rye3LiPvnv+3MjPDasKiIS/789/3x2f747eXDg+7Mifvu0tu7f+/QkfDTnPXWmPrjsvrjtPbPgrqZW+/QlPz48K2EMv36866OUPvowat8Ivvgq/Pbrvzgq/PguvrgrqN0Gda2evfYm9+7d/rpw9q6e/LSku/Rl/XVl/LSlfrkt+zVqe7Wqv3x1/bNffbOf59wFdS6if3u0vrqyP3owPvepfXQivDQkO/PkKh9K7STVf779P///////yH5BAEAAH8ALAAAAAAQABAAAAfNgH+Cg36FfoOIhH4JBxBghYl/hQkNAV0IVT5GkJKLCwtQaSsSdx9aR26Gcwt2IkQaNRI6dBERIzCFDSgWSW8WCDkbBnoOQ3uFARc/JQJfCAZlT0x4ZFyFBxdNQT9ZCBNWKQoKUQ+FEDgcdTIAV14YDmg2CgSFA0hmQC5TLE4VRTdrKJAoxOeFCzZSwsw4U6BCizwUQhQyEaAPiAwCVNCY0FCNnA6GPAwYoETIFgY9loiRA4dToTYnsOxg8CBGHE6ICvEYQ4AKzkidfgoKBAA7" style="background-color: white;" title="Data Type"/>                        <span title="StructureDefinition.contact.telecom : Contact details for individual (if a name was provided) or the publisher.">telecom</span>                        <a name="StructureDefinition.contact.telecom"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..*</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#ContactPoint">ContactPoint</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Contact details for individual or publisher</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.description : A free text natural language description of the StructureDefinition and its use.">description</span>                        <a name="StructureDefinition.description"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#string">string</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Natural language description of the StructureDefinition</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.requirements : Explains why this structure definition is needed and why it's been constrained as it has.">requirements</span>                        <a name="StructureDefinition.requirements"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px"/>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#string">string</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Scope and Usage this structure definition is for</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.copyright : A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.">copyright</span>                        <a name="StructureDefinition.copyright"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px"/>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#string">string</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Use and/or Publishing restrictions</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,R0lGODlhEAAQAOZ/APrkusOiYvvfqbiXWaV2G+jGhdq1b8GgYf3v1frw3vTUlsWkZNewbcSjY/DQkad4Hb6dXv3u0f3v1ObEgfPTlerJiP3w1v79+e7OkPrfrfnjuNOtZPrpydaxa+/YrvvdpP779ZxvFPvnwKKBQaFyF/369M2vdaqHRPz58/HNh/vowufFhfroxO3OkPrluv779tK0e6JzGProwvrow9m4eOnIifPTlPDPkP78+Naxaf3v0/zowfXRi+bFhLWUVv379/rnwPvszv3rye3LiPvnv+3MjPDasKiIS/789/3x2f747eXDg+7Mifvu0tu7f+/QkfDTnPXWmPrjsvrjtPbPgrqZW+/QlPz48K2EMv36866OUPvowat8Ivvgq/Pbrvzgq/PguvrgrqN0Gda2evfYm9+7d/rpw9q6e/LSku/Rl/XVl/LSlfrkt+zVqe7Wqv3x1/bNffbOf59wFdS6if3u0vrqyP3owPvepfXQivDQkO/PkKh9K7STVf779P///////yH5BAEAAH8ALAAAAAAQABAAAAfNgH+Cg36FfoOIhH4JBxBghYl/hQkNAV0IVT5GkJKLCwtQaSsSdx9aR26Gcwt2IkQaNRI6dBERIzCFDSgWSW8WCDkbBnoOQ3uFARc/JQJfCAZlT0x4ZFyFBxdNQT9ZCBNWKQoKUQ+FEDgcdTIAV14YDmg2CgSFA0hmQC5TLE4VRTdrKJAoxOeFCzZSwsw4U6BCizwUQhQyEaAPiAwCVNCY0FCNnA6GPAwYoETIFgY9loiRA4dToTYnsOxg8CBGHE6ICvEYQ4AKzkidfgoKBAA7" style="background-color: white;" title="Data Type"/>                        <span title="StructureDefinition.code : A set of terms from external terminologies that may be used to assist with indexing and searching of templates.">code</span>                        <a name="StructureDefinition.code"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..*</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#Coding">Coding</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Assist with indexing and finding</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.status : The status of the StructureDefinition.">status</span>                        <a name="StructureDefinition.status"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is a modifier element">?! </span>                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">1..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#code">code</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">draft | active | retired                         <br/>                        <a href="conformance-resource-status.html" title="The lifecycle status of a Value Set or Concept Map">ConformanceResourceStatus</a> (                         <a href="terminologies.html#required" title="To be conformant, instances of this element SHALL include a code from the specified value set.">Required</a>)                     </td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.experimental : This StructureDefinition was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.">experimental</span>                        <a name="StructureDefinition.experimental"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#boolean">boolean</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">If for testing purposes, not real usage</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.date : The date that this version of the StructureDefinition was published.">date</span>                        <a name="StructureDefinition.date"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#dateTime">dateTime</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Date for this version of the StructureDefinition</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.fhirVersion : The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 0.5.0 for this version.">fhirVersion</span>                        <a name="StructureDefinition.fhirVersion"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#id">id</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">FHIR Version this StructureDefinition targets</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,R0lGODlhEAAQAMQfAOvGUf7ztuvPMf/78/fkl/Pbg+u8Rvjqteu2Pf3zxPz36Pz0z+vTmPzurPvuw/npofbjquvNefHVduuyN+uuMu3Oafbgjfnqvf/3zv/3xevPi+vRjP/20/bmsP///////yH5BAEAAB8ALAAAAAAQABAAAAV24CeOZGmepqeqqOgxjBZFa+19r4ftWQUAgqDgltthMshMIJAZ4jYDHsBARSAmFOJvq+g6HIdEFgcYmBWNxoNAsDjGHgBnmV5bCoUDHLBIq9sFEhIdcAYJdYASFRUQhQkLCwkOFwcdEBAXhVabE52ecDahKy0oIQA7" style="background-color: white;" title="Element"/>                        <span title="StructureDefinition.mapping : An external specification that the content is mapped to.">mapping</span>                        <a name="StructureDefinition.mapping"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element has or is affected by some invariants">I</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..*</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="element.html">Element</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">External specification that the content is mapped to                         <br/>                        <span style="font-style: italic" title="sdf-2">Must have at a name or a uri (or both)</span>                    </td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAE0lEQVR42mP4/x0IaQwY/tMBAACSBMcpuec9bgAAAABJRU5ErkJggg==)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQEfT9fq3QAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAALElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2jNowasOgtgEAYt8nG43rdKUAAAAASUVORK5CYII="/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.mapping.identity : An Internal id that is used to identify this mapping set when specific mappings are made.">identity</span>                        <a name="StructureDefinition.mapping.identity"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px"/>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">1..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#id">id</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Internal id when this mapping is used</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAE0lEQVR42mP4/x0IaQwY/tMBAACSBMcpuec9bgAAAABJRU5ErkJggg==)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQEfT9fq3QAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAALElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2jNowasOgtgEAYt8nG43rdKUAAAAASUVORK5CYII="/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.mapping.uri : An absolute URI that identifies the specification that this mapping is expressed to.">uri</span>                        <a name="StructureDefinition.mapping.uri"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element has or is affected by some invariants">I</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#uri">uri</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Identifies what this mapping refers to</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAE0lEQVR42mP4/x0IaQwY/tMBAACSBMcpuec9bgAAAABJRU5ErkJggg==)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQEfT9fq3QAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAALElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2jNowasOgtgEAYt8nG43rdKUAAAAASUVORK5CYII="/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.mapping.name : A name for the specification that is being mapped to.">name</span>                        <a name="StructureDefinition.mapping.name"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element has or is affected by some invariants">I</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#string">string</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Names what this mapping refers to</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQEfT9fq3QAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAALElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2jNowasOgtgEAYt8nG43rdKUAAAAASUVORK5CYII="/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQcJ7Vn4CgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMklEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASVLPhlENoxpI1wAA9XMVKngLMyMAAAAASUVORK5CYII="/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.mapping.comments : Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.">comments</span>                        <a name="StructureDefinition.mapping.comments"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px"/>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#string">string</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Versions, Issues, Scope limitations etc</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.type : Defines the type of structure that this definition is describing.">type</span>                        <a name="StructureDefinition.type"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">1..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#code">code</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">type | resource | constraint | extension                         <br/>                        <a href="structure-definition-type.html" title="Defines the type of structure that a definition is describing">StructureDefinitionType</a> (                         <a href="terminologies.html#required" title="To be conformant, instances of this element SHALL include a code from the specified value set.">Required</a>)                     </td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.abstract : Whether structure this definition describes is abstract or not - that is, whether an actual exchanged item can ever be of this type.">abstract</span>                        <a name="StructureDefinition.abstract"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">?</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">1..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#boolean">boolean</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Whether the structure is abstract</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.contextType : If this is an extension, Identifies the context within FHIR resources where the extension can be used.">contextType</span>                        <a name="StructureDefinition.contextType"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">? </span>                        <span title="This element has or is affected by some invariants">I</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#code">code</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">resource | datatype | mapping | extension                         <br/>                        <a href="extension-context.html" title="How an extension context is interpreted">ExtensionContext</a> (                         <a href="terminologies.html#required" title="To be conformant, instances of this element SHALL include a code from the specified value set.">Required</a>)                     </td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.context : Identifies the types of resource or data type elements to which the extension can be applied.">context</span>                        <a name="StructureDefinition.context"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">? </span>                        <span title="This element has or is affected by some invariants">I</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..*</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#string">string</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Where the extension can be used in instances</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFzI0BrFQCwAAAERJREFUOMtj/P//PwMlgImBQjDwBrCcOnWKokBgYWBgYDCU+06W5i8MUggvnH/EOVJjAW4AuQHJ+O75LYqikXE0LzAAALePEntTkEoSAAAAAElFTkSuQmCC" style="background-color: white;" title="Primitive Data Type"/>                        <span title="StructureDefinition.base : An absolute URI that is the base structure from which this set of constraints is derived.">base</span>                        <a name="StructureDefinition.base"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element is included in summaries">? </span>                        <span title="This element has or is affected by some invariants">I</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="datatypes.html#uri">uri</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Structure that this set of constraints applies to</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQUUvGn2UQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASY6G0qgNA2kDAHnCJyR4Ta2WAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,R0lGODlhEAAQAMQfAOvGUf7ztuvPMf/78/fkl/Pbg+u8Rvjqteu2Pf3zxPz36Pz0z+vTmPzurPvuw/npofbjquvNefHVduuyN+uuMu3Oafbgjfnqvf/3zv/3xevPi+vRjP/20/bmsP///////yH5BAEAAB8ALAAAAAAQABAAAAV24CeOZGmepqeqqOgxjBZFa+19r4ftWQUAgqDgltthMshMIJAZ4jYDHsBARSAmFOJvq+g6HIdEFgcYmBWNxoNAsDjGHgBnmV5bCoUDHLBIq9sFEhIdcAYJdYASFRUQhQkLCwkOFwcdEBAXhVabE52ecDahKy0oIQA7" style="background-color: white;" title="Element"/>                        <span title="StructureDefinition.snapshot : A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.">snapshot</span>                        <a name="StructureDefinition.snapshot"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element has or is affected by some invariants">I</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="element.html">Element</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Snapshot view of the structure                         <br/>                        <span style="font-style: italic" title="sdf-1">Element paths must be unique - or not (LM)</span>                        <br/>                        <span style="font-style: italic" title="sdf-3">If a structure is a snapshot, then each element definition must have a formal definition, and cardinalities</span>                    </td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAEklEQVR42mP4//0/zQHDfzoAAJg0xzGxXiQ9AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQEfT9fq3QAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAALElEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2jNowasOgtgEAYt8nG43rdKUAAAAASUVORK5CYII="/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQcJ7Vn4CgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMklEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASVLPhlENoxpI1wAA9XMVKngLMyMAAAAASUVORK5CYII="/>                        <img alt="." class="heirarchy" src="data: image/png;base64,R0lGODlhEAAQAOZ/APrkusOiYvvfqbiXWaV2G+jGhdq1b8GgYf3v1frw3vTUlsWkZNewbcSjY/DQkad4Hb6dXv3u0f3v1ObEgfPTlerJiP3w1v79+e7OkPrfrfnjuNOtZPrpydaxa+/YrvvdpP779ZxvFPvnwKKBQaFyF/369M2vdaqHRPz58/HNh/vowufFhfroxO3OkPrluv779tK0e6JzGProwvrow9m4eOnIifPTlPDPkP78+Naxaf3v0/zowfXRi+bFhLWUVv379/rnwPvszv3rye3LiPvnv+3MjPDasKiIS/789/3x2f747eXDg+7Mifvu0tu7f+/QkfDTnPXWmPrjsvrjtPbPgrqZW+/QlPz48K2EMv36866OUPvowat8Ivvgq/Pbrvzgq/PguvrgrqN0Gda2evfYm9+7d/rpw9q6e/LSku/Rl/XVl/LSlfrkt+zVqe7Wqv3x1/bNffbOf59wFdS6if3u0vrqyP3owPvepfXQivDQkO/PkKh9K7STVf779P///////yH5BAEAAH8ALAAAAAAQABAAAAfNgH+Cg36FfoOIhH4JBxBghYl/hQkNAV0IVT5GkJKLCwtQaSsSdx9aR26Gcwt2IkQaNRI6dBERIzCFDSgWSW8WCDkbBnoOQ3uFARc/JQJfCAZlT0x4ZFyFBxdNQT9ZCBNWKQoKUQ+FEDgcdTIAV14YDmg2CgSFA0hmQC5TLE4VRTdrKJAoxOeFCzZSwsw4U6BCizwUQhQyEaAPiAwCVNCY0FCNnA6GPAwYoETIFgY9loiRA4dToTYnsOxg8CBGHE6ICvEYQ4AKzkidfgoKBAA7" style="background-color: white;" title="Data Type"/>                        <span title="StructureDefinition.snapshot.element : Captures constraints on each element within the resource.">element</span>                        <a name="StructureDefinition.snapshot.element"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element has or is affected by some invariants">I</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">1..*</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="elementdefinition.html#ElementDefinition">ElementDefinition</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Definition of elements in the resource (if no StructureDefinition)</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAD0lEQVR42mP4TwfAQA9LAJ50xzkA9NE0AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQcJ7Vn4CgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMklEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASVLPhlENoxpI1wAA9XMVKngLMyMAAAAASUVORK5CYII="/>                        <img alt="." class="heirarchy" src="data: image/png;base64,R0lGODlhEAAQAMQfAOvGUf7ztuvPMf/78/fkl/Pbg+u8Rvjqteu2Pf3zxPz36Pz0z+vTmPzurPvuw/npofbjquvNefHVduuyN+uuMu3Oafbgjfnqvf/3zv/3xevPi+vRjP/20/bmsP///////yH5BAEAAB8ALAAAAAAQABAAAAV24CeOZGmepqeqqOgxjBZFa+19r4ftWQUAgqDgltthMshMIJAZ4jYDHsBARSAmFOJvq+g6HIdEFgcYmBWNxoNAsDjGHgBnmV5bCoUDHLBIq9sFEhIdcAYJdYASFRUQhQkLCwkOFwcdEBAXhVabE52ecDahKy0oIQA7" style="background-color: white;" title="Element"/>                        <span title="StructureDefinition.differential : A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.">differential</span>                        <a name="StructureDefinition.differential"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <span title="This element has or is affected by some invariants">I</span>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">0..1</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="element.html">Element</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Differential view of the structure</td>                </tr>                <tr style="border: 0px; padding:0px; vertical-align: top; background-color: white;">                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px; white-space: nowrap; background-image: url(data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAyAAAAACAQAAAACIh4VlAAAAD0lEQVR42mP4TwfAQA9LAJ50xzkA9NE0AAAAAElFTkSuQmCC)">                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAAWCAIAAACOpGH9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBFTQr3mcuFgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAEklEQVQI12P4//8/EwMDA7UxAAidAygBXEHpAAAAAElFTkSuQmCC"/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQA2FH5D8AAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAHElEQVQ4y2P8//8/AymAiYFEMKphVMOohuGlAQDw8gMpyiAhRwAAAABJRU5ErkJggg=="/>                        <img alt="." class="heirarchy" src="data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAWCAIAAABGyIsrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gYBDQcJ7Vn4CgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAMklEQVQ4y2P8//8/AwZgZGTEKs7AwIBTAhdgwm4MIyMuDaM2oNmASVLPhlENoxpI1wAA9XMVKngLMyMAAAAASUVORK5CYII="/>                        <img alt="." class="heirarchy" src="data: image/png;base64,R0lGODlhEAAQAOZ/APrkusOiYvvfqbiXWaV2G+jGhdq1b8GgYf3v1frw3vTUlsWkZNewbcSjY/DQkad4Hb6dXv3u0f3v1ObEgfPTlerJiP3w1v79+e7OkPrfrfnjuNOtZPrpydaxa+/YrvvdpP779ZxvFPvnwKKBQaFyF/369M2vdaqHRPz58/HNh/vowufFhfroxO3OkPrluv779tK0e6JzGProwvrow9m4eOnIifPTlPDPkP78+Naxaf3v0/zowfXRi+bFhLWUVv379/rnwPvszv3rye3LiPvnv+3MjPDasKiIS/789/3x2f747eXDg+7Mifvu0tu7f+/QkfDTnPXWmPrjsvrjtPbPgrqZW+/QlPz48K2EMv36866OUPvowat8Ivvgq/Pbrvzgq/PguvrgrqN0Gda2evfYm9+7d/rpw9q6e/LSku/Rl/XVl/LSlfrkt+zVqe7Wqv3x1/bNffbOf59wFdS6if3u0vrqyP3owPvepfXQivDQkO/PkKh9K7STVf779P///////yH5BAEAAH8ALAAAAAAQABAAAAfNgH+Cg36FfoOIhH4JBxBghYl/hQkNAV0IVT5GkJKLCwtQaSsSdx9aR26Gcwt2IkQaNRI6dBERIzCFDSgWSW8WCDkbBnoOQ3uFARc/JQJfCAZlT0x4ZFyFBxdNQT9ZCBNWKQoKUQ+FEDgcdTIAV14YDmg2CgSFA0hmQC5TLE4VRTdrKJAoxOeFCzZSwsw4U6BCizwUQhQyEaAPiAwCVNCY0FCNnA6GPAwYoETIFgY9loiRA4dToTYnsOxg8CBGHE6ICvEYQ4AKzkidfgoKBAA7" style="background-color: white;" title="Data Type"/>                        <span title="StructureDefinition.differential.element : Captures constraints on each element within the resource.">element</span>                        <a name="StructureDefinition.differential.element"/>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px"/>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">1..*</td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">                        <a href="elementdefinition.html#ElementDefinition">ElementDefinition</a>                    </td>                    <td class="heirarchy" style="vertical-align: top; text-align : left; padding:0px 4px 0px 4px">Definition of elements in the resource (if no StructureDefinition)</td>                </tr>            </table>        </div>    </text>    <url value="http://hl7.org/fhir/StructureDefinition/StructureDefinition"/>    <name value="StructureDefinition"/>    <publisher value="HL7 FHIR Project (FHIR Management Group)"/>    <contact>        <telecom>            <system value="url"/>            <value value="http://hl7.org/fhir"/>        </telecom>    </contact>    <contact>        <telecom>            <system value="url"/>            <value value="http://www.hl7.org/Special/committees/fhirmg/index.cfm"/>        </telecom>    </contact>    <description value="Base StructureDefinition for StructureDefinition Resource"/>    <status value="draft"/>    <date value="2015-04-03T14:24:32+11:00"/>    <mapping>        <identity value="iso11179"/>        <uri value="http://metadata-standards.org/11179/"/>        <name value="ISO 11179"/>    </mapping>    <mapping>        <identity value="rim"/>        <uri value="http://hl7.org/v3"/>        <name value="RIM"/>    </mapping>    <type value="resource"/>    <abstract value="true"/>    <snapshot>        <element>            <path value="StructureDefinition"/>            <short value="Structural Definition"/>            <definition value="A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types."/>            <alias value="Template"/>            <alias value="Profile"/>            <min value="1"/>            <max value="1"/>            <type>                <code value="DomainResource"/>            </type>            <constraint>                <key value="sdf-5"/>                <severity value="error"/>                <human value="If the type is 'extension' then the structure must have context information"/>                <xpath value="not(f:type/@value = 'extension') or (f:context and f:contextType)"/>            </constraint>            <constraint>                <key value="sdf-4"/>                <severity value="error"/>                <human value="A structure must have a base unless it?s type is 'abstract'"/>                <xpath value="(f:type/@value = 'abstract') or f:base"/>            </constraint>            <constraint>                <key value="sdf-7"/>                <severity value="error"/>                <human value="If the type is Resource or Type, the url has to start with 'http://hl7.org/fhir/StructureDefinition/' and the tail must match the name"/>                <xpath value="not(f:type/@value=('Resource', 'Type')) or f:url/@value=concat('http://hl7.org/fhir/StructureDefinition/', f:name/@value)"/>            </constraint>            <constraint>                <key value="sdf-6"/>                <severity value="error"/>                <human value="A structure must have either a differential, or a snapshot (or both)"/>                <xpath value="f:snapshot or f:differential"/>            </constraint>            <constraint>                <key value="sdf-8"/>                <severity value="error"/>                <human value="In any snapshot or differential, all the elements except the first have to have a path that starts with the path of the first + '.'"/>                <xpath value="string-join(for $elementName in f:*[self::f:snapshot or self::f:differential]/f:element[position()&gt;1]/f:path/@value return if (starts-with($elementName, concat($elementName/ancestor::f:element/parent::f:*/f:element[1]/f:path/@value, '.'))) then '' else $elementName,'')=''"/>            </constraint>        </element>        <element>            <path value="StructureDefinition.id"/>            <short value="Logical id of this artefact"/>            <definition value="The logical id of the resource, as used in the url for the resoure. Once assigned, this value never changes."/>            <comments value="The only time that a resource does not have an id is when it is being submitted to the server using a create operation. Bundles always have an id, though it is usually a generated UUID."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="id"/>            </type>        </element>        <element>            <path value="StructureDefinition.meta"/>            <short value="Metadata about the resource"/>            <definition value="The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="Meta"/>            </type>        </element>        <element>            <path value="StructureDefinition.implicitRules"/>            <short value="A set of rules under which this content was created"/>            <definition value="A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content."/>            <comments value="Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element as much as possible."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="uri"/>            </type>            <isModifier value="true"/>        </element>        <element>            <path value="StructureDefinition.language"/>            <short value="Language of the resource content"/>            <definition value="The base language in which the resource is written."/>            <comments value="Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute)."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="code"/>            </type>            <binding>                <name value="Language"/>                <strength value="required"/>                <description value="A human language"/>                <valueSetUri value="http://tools.ietf.org/html/bcp47"/>            </binding>        </element>        <element>            <path value="StructureDefinition.text"/>            <short value="Text summary of the resource, for human interpretation"/>            <definition value="A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety."/>            <comments value="Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative."/>            <alias value="narrative"/>            <alias value="html"/>            <alias value="xhtml"/>            <alias value="display"/>            <min value="0"/>            <max value="1"/>            <type>                <code value="Narrative"/>            </type>            <condition value="dom-1"/>            <mapping>                <identity value="rim"/>                <map value="Act.text?"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.contained"/>            <short value="Contained, inline Resources"/>            <definition value="These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope."/>            <comments value="This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again."/>            <alias value="inline resources"/>            <alias value="anonymous resources"/>            <alias value="contained resources"/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Resource"/>            </type>            <mapping>                <identity value="rim"/>                <map value="N/A"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.extension"/>            <short value="Additional Content defined by implementations"/>            <definition value="May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."/>            <comments value="There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions. The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone."/>            <alias value="extensions"/>            <alias value="user content"/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Extension"/>            </type>            <mapping>                <identity value="rim"/>                <map value="N/A"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.modifierExtension"/>            <short value="Extensions that cannot be ignored"/>            <definition value="May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions."/>            <comments value="There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions. The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone."/>            <alias value="extensions"/>            <alias value="user content"/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Extension"/>            </type>            <isModifier value="true"/>            <mapping>                <identity value="rim"/>                <map value="N/A"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.url"/>            <short value="Literal URL used to reference this StructureDefinition"/>            <definition value="An absolute URL at which this StructureDefinition is (or will be) published, and which is used to reference this StructureDefinition in extension urls and tag values in operational FHIR systems."/>            <requirements value="So you can say, in a StructureDefinition, what the full extensions URLs should be. This is required to allow hosting StructureDefinitions on multiple different servers, and to allow for the editorial process."/>            <alias value="url"/>            <alias value="authoritative-url"/>            <alias value="destination"/>            <alias value="identity"/>            <min value="1"/>            <max value="1"/>            <type>                <code value="uri"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.identifier"/>            <short value="Other identifiers for the StructureDefinition"/>            <definition value="Formal identifier that is used to identify this StructureDefinition when it is represented in other formats, or referenced in a specification, model, design or an instance (should be globally unique OID, UUID, or URI), (if it's not possible to use the literal URI)."/>            <comments value="N/A."/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Identifier"/>            </type>            <isSummary value="true"/>            <mapping>                <identity value="iso11179"/>                <map value="Identifier part"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.version"/>            <short value="Logical id for this version of the StructureDefinition"/>            <definition value="The identifier that is used to identify this version of the StructureDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the StructureDefinition author manually."/>            <comments value="N/A."/>            <requirements value="There may be multiple resource versions of the StructureDefinition that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <isSummary value="true"/>            <mapping>                <identity value="iso11179"/>                <map value="Version"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.name"/>            <short value="Informal name for this StructureDefinition"/>            <definition value="A free text natural language name identifying the StructureDefinition."/>            <comments value="Not expected to be globally unique."/>            <min value="1"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.useContext"/>            <short value="Content intends to support these contexts"/>            <definition value="The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of structure definitions."/>            <requirements value="Assist in searching for appropriate content."/>            <min value="0"/>            <max value="*"/>            <type>                <code value="CodeableConcept"/>            </type>            <isSummary value="true"/>            <binding>                <name value="ConformanceUseContext"/>                <strength value="extensible"/>                <description value="Indicates the countries, regions, disciplines and other aspects of use this artifact is targeted for use within"/>                <valueSetReference>                    <reference value="http://hl7.org/fhir/vs/use-context"/>                </valueSetReference>            </binding>            <mapping>                <identity value="iso11179"/>                <map value="COMPONENT, PROPERTY, TIME_ASPCT, SYSTEM, SCALE_TYP, METHOD_TYP, CLASS, CLASSTYPE, ORDER_OBS, DOCUMENT_SECTION, HL7_ATTACHMENT_STRUCTURE"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.display"/>            <short value="Use this name when displaying the value"/>            <definition value="Defined so that applications can use this name when displaying the value of the extension to the user."/>            <comments value="Applications don't have to use this name, but can always fall back to it. In the absence of a value for this element, use the name."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.publisher"/>            <short value="Name of the publisher (Organization or individual)"/>            <definition value="The name of the individual or organization that published the structure definition."/>            <comments value="Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context."/>            <requirements value="Helps establish the 'authority/credibility' of the structure definition. May also allow for contact."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <isSummary value="true"/>            <mapping>                <identity value="iso11179"/>                <map value="Registration Authority"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.contact"/>            <short value="Contact details of the publisher"/>            <definition value="Contacts to assist a user in finding and communicating with the publisher."/>            <comments value="May be a web site, an email address, a telephone number (tel:), etc."/>            <min value="0"/>            <max value="*"/>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.contact.id"/>            <representation value="xmlAttr"/>            <short value="xml:id (or equivalent in JSON)"/>            <definition value="unique id for the element within a resource (for internal references)."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="id"/>            </type>            <mapping>                <identity value="rim"/>                <map value="n/a"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.contact.extension"/>            <short value="Additional Content defined by implementations"/>            <definition value="May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."/>            <comments value="There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions. The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone."/>            <alias value="extensions"/>            <alias value="user content"/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Extension"/>            </type>            <mapping>                <identity value="rim"/>                <map value="n/a"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.contact.modifierExtension"/>            <short value="Extensions that cannot be ignored"/>            <definition value="May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions."/>            <comments value="There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions. The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone."/>            <alias value="extensions"/>            <alias value="user content"/>            <alias value="modifiers"/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Extension"/>            </type>            <isModifier value="true"/>            <mapping>                <identity value="rim"/>                <map value="N/A"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.contact.name"/>            <short value="Name of a individual to contact"/>            <definition value="The name of an individual to contact regarding the structure definition."/>            <comments value="If there is no named individual, the telecom is for the organization as a whole."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.contact.telecom"/>            <short value="Contact details for individual or publisher"/>            <definition value="Contact details for individual (if a name was provided) or the publisher."/>            <min value="0"/>            <max value="*"/>            <type>                <code value="ContactPoint"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.description"/>            <short value="Natural language description of the StructureDefinition"/>            <definition value="A free text natural language description of the StructureDefinition and its use."/>            <comments value="This field can be used for things such as why the StructureDefinition was written, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is *not* a rendering of the StructureDefinition as conveyed in StructureDefinition.text. This item SHOULD be populated unless the information is available from context."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.requirements"/>            <short value="Scope and Usage this structure definition is for"/>            <definition value="Explains why this structure definition is needed and why it's been constrained as it has."/>            <comments value="This element does not describe the usage of the structure definition (that's done in comments), rather it's for traceability of *why* the element is either needed or why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this data element."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>        </element>        <element>            <path value="StructureDefinition.copyright"/>            <short value="Use and/or Publishing restrictions"/>            <definition value="A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings."/>            <alias value="License"/>            <alias value="Restrictions"/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>        </element>        <element>            <path value="StructureDefinition.code"/>            <short value="Assist with indexing and finding"/>            <definition value="A set of terms from external terminologies that may be used to assist with indexing and searching of templates."/>            <requirements value="Assist in searching for appropriate StructureDefinitions."/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Coding"/>            </type>            <isSummary value="true"/>            <mapping>                <identity value="iso11179"/>                <map value="keywords"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.status"/>            <short value="draft | active | retired"/>            <definition value="The status of the StructureDefinition."/>            <requirements value="Allows filtering of StructureDefinitions that are appropriate for use vs. not."/>            <min value="1"/>            <max value="1"/>            <type>                <code value="code"/>            </type>            <isModifier value="true"/>            <isSummary value="true"/>            <binding>                <name value="ConformanceResourceStatus"/>                <strength value="required"/>                <description value="The lifecycle status of a Value Set or Concept Map"/>                <valueSetReference>                    <reference value="http://hl7.org/fhir/vs/conformance-resource-status"/>                </valueSetReference>            </binding>            <mapping>                <identity value="iso11179"/>                <map value="Registration status"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.experimental"/>            <short value="If for testing purposes, not real usage"/>            <definition value="This StructureDefinition was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage."/>            <requirements value="Allows filtering of StructureDefinitions that are appropriate for use vs. not."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="boolean"/>            </type>            <isSummary value="true"/>            <mapping>                <identity value="iso11179"/>                <map value="Registration status"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.date"/>            <short value="Date for this version of the StructureDefinition"/>            <definition value="The date that this version of the StructureDefinition was published."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="dateTime"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.fhirVersion"/>            <short value="FHIR Version this StructureDefinition targets"/>            <definition value="The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 0.5.0 for this version."/>            <comments value="A StructureDefinition does not need to specify the target it applies to,as StructureDefinitions will often be valid across multiple versions of FHIR. FHIR tooling can determine whether a StructureDefinition is consistent with a particular StructureDefinition if desired."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="id"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.mapping"/>            <short value="External specification that the content is mapped to"/>            <definition value="An external specification that the content is mapped to."/>            <min value="0"/>            <max value="*"/>            <constraint>                <key value="sdf-2"/>                <severity value="error"/>                <human value="Must have at a name or a uri (or both)"/>                <xpath value="exists(f:uri) or exists(f:name)"/>            </constraint>        </element>        <element>            <path value="StructureDefinition.mapping.id"/>            <representation value="xmlAttr"/>            <short value="xml:id (or equivalent in JSON)"/>            <definition value="unique id for the element within a resource (for internal references)."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="id"/>            </type>            <mapping>                <identity value="rim"/>                <map value="n/a"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.mapping.extension"/>            <short value="Additional Content defined by implementations"/>            <definition value="May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."/>            <comments value="There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions. The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone."/>            <alias value="extensions"/>            <alias value="user content"/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Extension"/>            </type>            <mapping>                <identity value="rim"/>                <map value="n/a"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.mapping.modifierExtension"/>            <short value="Extensions that cannot be ignored"/>            <definition value="May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions."/>            <comments value="There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions. The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone."/>            <alias value="extensions"/>            <alias value="user content"/>            <alias value="modifiers"/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Extension"/>            </type>            <isModifier value="true"/>            <mapping>                <identity value="rim"/>                <map value="N/A"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.mapping.identity"/>            <short value="Internal id when this mapping is used"/>            <definition value="An Internal id that is used to identify this mapping set when specific mappings are made."/>            <comments value="The specification is described once, with general comments, and then specific mappings are made that reference this declaration."/>            <min value="1"/>            <max value="1"/>            <type>                <code value="id"/>            </type>        </element>        <element>            <path value="StructureDefinition.mapping.uri"/>            <short value="Identifies what this mapping refers to"/>            <definition value="An absolute URI that identifies the specification that this mapping is expressed to."/>            <comments value="A formal identity for the specification being mapped to helps with identifying maps consistently."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="uri"/>            </type>            <condition value="sdf-2"/>        </element>        <element>            <path value="StructureDefinition.mapping.name"/>            <short value="Names what this mapping refers to"/>            <definition value="A name for the specification that is being mapped to."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <condition value="sdf-2"/>        </element>        <element>            <path value="StructureDefinition.mapping.comments"/>            <short value="Versions, Issues, Scope limitations etc"/>            <definition value="Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>        </element>        <element>            <path value="StructureDefinition.type"/>            <short value="type | resource | constraint | extension"/>            <definition value="Defines the type of structure that this definition is describing."/>            <min value="1"/>            <max value="1"/>            <type>                <code value="code"/>            </type>            <isSummary value="true"/>            <binding>                <name value="StructureDefinitionType"/>                <strength value="required"/>                <description value="Defines the type of structure that a definition is describing"/>                <valueSetReference>                    <reference value="http://hl7.org/fhir/vs/structure-definition-type"/>                </valueSetReference>            </binding>        </element>        <element>            <path value="StructureDefinition.abstract"/>            <short value="Whether the structure is abstract"/>            <definition value="Whether structure this definition describes is abstract or not - that is, whether an actual exchanged item can ever be of this type."/>            <comments value="Abstract Resources cannot be instantiated - a concrete sub-type must be used. Abstract datatypes and extensions cannot be used in an instance. Flagging a constraint structure as abstract conveys design intent but makes no difference to how the structure definition is handled. Note that inline declared elements that are given the type 'Element' in the profile, but have children described, are anonymous concrete types that specialise Element."/>            <min value="1"/>            <max value="1"/>            <type>                <code value="boolean"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.contextType"/>            <short value="resource | datatype | mapping | extension"/>            <definition value="If this is an extension, Identifies the context within FHIR resources where the extension can be used."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="code"/>            </type>            <condition value="sdf-5"/>            <isSummary value="true"/>            <binding>                <name value="ExtensionContext"/>                <strength value="required"/>                <description value="How an extension context is interpreted"/>                <valueSetReference>                    <reference value="http://hl7.org/fhir/vs/extension-context"/>                </valueSetReference>            </binding>        </element>        <element>            <path value="StructureDefinition.context"/>            <short value="Where the extension can be used in instances"/>            <definition value="Identifies the types of resource or data type elements to which the extension can be applied."/>            <comments value="If the context is an element that can have multiple types, then use (e.g.) value[x] if the extension works on all choice types, or otherwise an enumeration of explicitly named elements if not. Note that a context of 'string' doesn't mean that the extension can be used with one of the string patterns such as 'id' etc."/>            <min value="0"/>            <max value="*"/>            <type>                <code value="string"/>            </type>            <condition value="sdf-5"/>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.base"/>            <short value="Structure that this set of constraints applies to"/>            <definition value="An absolute URI that is the base structure from which this set of constraints is derived."/>            <comments value="If differential constraints are specified in this structure, they are applied to the base in a 'differential' fashion. If there is no base, then the differential constraints cannot be provided (snapshot only). Differential structures are useful for the editing perspective, and snapshot structures are suitable for operational use. The FHIR Project provides a number of tools/services to populate snaphots from differential constraints."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="uri"/>            </type>            <condition value="sdf-4"/>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.snapshot"/>            <short value="Snapshot view of the structure"/>            <definition value="A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition."/>            <min value="0"/>            <max value="1"/>            <condition value="sdf-6"/>            <constraint>                <key value="sdf-1"/>                <severity value="error"/>                <human value="Element paths must be unique - or not (LM)"/>                <xpath value="count(f:element) &gt;= count(distinct-values(f:element/f:path/@value))"/>            </constraint>            <constraint>                <key value="sdf-3"/>                <severity value="error"/>                <human value="If a structure is a snapshot, then each element definition must have a formal definition, and cardinalities"/>                <xpath value="exists(f:base) or (count(f:element) = count(f:element[exists(f:definition) and exists(f:min) and exists(f:max)]))"/>            </constraint>        </element>        <element>            <path value="StructureDefinition.snapshot.id"/>            <representation value="xmlAttr"/>            <short value="xml:id (or equivalent in JSON)"/>            <definition value="unique id for the element within a resource (for internal references)."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="id"/>            </type>            <mapping>                <identity value="rim"/>                <map value="n/a"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.snapshot.extension"/>            <short value="Additional Content defined by implementations"/>            <definition value="May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."/>            <comments value="There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions. The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone."/>            <alias value="extensions"/>            <alias value="user content"/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Extension"/>            </type>            <mapping>                <identity value="rim"/>                <map value="n/a"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.snapshot.modifierExtension"/>            <short value="Extensions that cannot be ignored"/>            <definition value="May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions."/>            <comments value="There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions. The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone."/>            <alias value="extensions"/>            <alias value="user content"/>            <alias value="modifiers"/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Extension"/>            </type>            <isModifier value="true"/>            <mapping>                <identity value="rim"/>                <map value="N/A"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.snapshot.element"/>            <short value="Definition of elements in the resource (if no StructureDefinition)"/>            <definition value="Captures constraints on each element within the resource."/>            <min value="1"/>            <max value="*"/>            <type>                <code value="ElementDefinition"/>            </type>            <condition value="sdf-3"/>            <mapping>                <identity value="iso11179"/>                <map value="--"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.differential"/>            <short value="Differential view of the structure"/>            <definition value="A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies."/>            <min value="0"/>            <max value="1"/>            <condition value="sdf-6"/>        </element>        <element>            <path value="StructureDefinition.differential.id"/>            <representation value="xmlAttr"/>            <short value="xml:id (or equivalent in JSON)"/>            <definition value="unique id for the element within a resource (for internal references)."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="id"/>            </type>            <mapping>                <identity value="rim"/>                <map value="n/a"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.differential.extension"/>            <short value="Additional Content defined by implementations"/>            <definition value="May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."/>            <comments value="There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions. The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone."/>            <alias value="extensions"/>            <alias value="user content"/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Extension"/>            </type>            <mapping>                <identity value="rim"/>                <map value="n/a"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.differential.modifierExtension"/>            <short value="Extensions that cannot be ignored"/>            <definition value="May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions."/>            <comments value="There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions. The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone."/>            <alias value="extensions"/>            <alias value="user content"/>            <alias value="modifiers"/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Extension"/>            </type>            <isModifier value="true"/>            <mapping>                <identity value="rim"/>                <map value="N/A"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.differential.element"/>            <short value="Definition of elements in the resource (if no StructureDefinition)"/>            <definition value="Captures constraints on each element within the resource."/>            <min value="1"/>            <max value="*"/>            <type>                <code value="ElementDefinition"/>            </type>            <mapping>                <identity value="iso11179"/>                <map value="--"/>            </mapping>        </element>    </snapshot>    <differential>        <element>            <path value="StructureDefinition"/>            <short value="Structural Definition"/>            <definition value="A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types."/>            <alias value="Template"/>            <alias value="Profile"/>            <min value="1"/>            <max value="1"/>            <type>                <code value="DomainResource"/>            </type>            <constraint>                <key value="sdf-5"/>                <severity value="error"/>                <human value="If the type is 'extension' then the structure must have context information"/>                <xpath value="not(f:type/@value = 'extension') or (f:context and f:contextType)"/>            </constraint>            <constraint>                <key value="sdf-4"/>                <severity value="error"/>                <human value="A structure must have a base unless it?s type is 'abstract'"/>                <xpath value="(f:type/@value = 'abstract') or f:base"/>            </constraint>            <constraint>                <key value="sdf-7"/>                <severity value="error"/>                <human value="If the type is Resource or Type, the url has to start with 'http://hl7.org/fhir/StructureDefinition/' and the tail must match the name"/>                <xpath value="not(f:type/@value=('Resource', 'Type')) or f:url/@value=concat('http://hl7.org/fhir/StructureDefinition/', f:name/@value)"/>            </constraint>            <constraint>                <key value="sdf-6"/>                <severity value="error"/>                <human value="A structure must have either a differential, or a snapshot (or both)"/>                <xpath value="f:snapshot or f:differential"/>            </constraint>            <constraint>                <key value="sdf-8"/>                <severity value="error"/>                <human value="In any snapshot or differential, all the elements except the first have to have a path that starts with the path of the first + '.'"/>                <xpath value="string-join(for $elementName in f:*[self::f:snapshot or self::f:differential]/f:element[position()&gt;1]/f:path/@value return if (starts-with($elementName, concat($elementName/ancestor::f:element/parent::f:*/f:element[1]/f:path/@value, '.'))) then '' else $elementName,'')=''"/>            </constraint>        </element>        <element>            <path value="StructureDefinition.url"/>            <short value="Literal URL used to reference this StructureDefinition"/>            <definition value="An absolute URL at which this StructureDefinition is (or will be) published, and which is used to reference this StructureDefinition in extension urls and tag values in operational FHIR systems."/>            <requirements value="So you can say, in a StructureDefinition, what the full extensions URLs should be. This is required to allow hosting StructureDefinitions on multiple different servers, and to allow for the editorial process."/>            <alias value="url"/>            <alias value="authoritative-url"/>            <alias value="destination"/>            <alias value="identity"/>            <min value="1"/>            <max value="1"/>            <type>                <code value="uri"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.identifier"/>            <short value="Other identifiers for the StructureDefinition"/>            <definition value="Formal identifier that is used to identify this StructureDefinition when it is represented in other formats, or referenced in a specification, model, design or an instance (should be globally unique OID, UUID, or URI), (if it's not possible to use the literal URI)."/>            <comments value="N/A."/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Identifier"/>            </type>            <isSummary value="true"/>            <mapping>                <identity value="iso11179"/>                <map value="Identifier part"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.version"/>            <short value="Logical id for this version of the StructureDefinition"/>            <definition value="The identifier that is used to identify this version of the StructureDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the StructureDefinition author manually."/>            <comments value="N/A."/>            <requirements value="There may be multiple resource versions of the StructureDefinition that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <isSummary value="true"/>            <mapping>                <identity value="iso11179"/>                <map value="Version"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.name"/>            <short value="Informal name for this StructureDefinition"/>            <definition value="A free text natural language name identifying the StructureDefinition."/>            <comments value="Not expected to be globally unique."/>            <min value="1"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.useContext"/>            <short value="Content intends to support these contexts"/>            <definition value="The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of structure definitions."/>            <requirements value="Assist in searching for appropriate content."/>            <min value="0"/>            <max value="*"/>            <type>                <code value="CodeableConcept"/>            </type>            <isSummary value="true"/>            <binding>                <name value="ConformanceUseContext"/>                <strength value="extensible"/>                <description value="Indicates the countries, regions, disciplines and other aspects of use this artifact is targeted for use within"/>                <valueSetReference>                    <reference value="http://hl7.org/fhir/vs/use-context"/>                </valueSetReference>            </binding>            <mapping>                <identity value="iso11179"/>                <map value="COMPONENT, PROPERTY, TIME_ASPCT, SYSTEM, SCALE_TYP, METHOD_TYP, CLASS, CLASSTYPE, ORDER_OBS, DOCUMENT_SECTION, HL7_ATTACHMENT_STRUCTURE"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.display"/>            <short value="Use this name when displaying the value"/>            <definition value="Defined so that applications can use this name when displaying the value of the extension to the user."/>            <comments value="Applications don't have to use this name, but can always fall back to it. In the absence of a value for this element, use the name."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.publisher"/>            <short value="Name of the publisher (Organization or individual)"/>            <definition value="The name of the individual or organization that published the structure definition."/>            <comments value="Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context."/>            <requirements value="Helps establish the 'authority/credibility' of the structure definition. May also allow for contact."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <isSummary value="true"/>            <mapping>                <identity value="iso11179"/>                <map value="Registration Authority"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.contact"/>            <short value="Contact details of the publisher"/>            <definition value="Contacts to assist a user in finding and communicating with the publisher."/>            <comments value="May be a web site, an email address, a telephone number (tel:), etc."/>            <min value="0"/>            <max value="*"/>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.contact.name"/>            <short value="Name of a individual to contact"/>            <definition value="The name of an individual to contact regarding the structure definition."/>            <comments value="If there is no named individual, the telecom is for the organization as a whole."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.contact.telecom"/>            <short value="Contact details for individual or publisher"/>            <definition value="Contact details for individual (if a name was provided) or the publisher."/>            <min value="0"/>            <max value="*"/>            <type>                <code value="ContactPoint"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.description"/>            <short value="Natural language description of the StructureDefinition"/>            <definition value="A free text natural language description of the StructureDefinition and its use."/>            <comments value="This field can be used for things such as why the StructureDefinition was written, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is *not* a rendering of the StructureDefinition as conveyed in StructureDefinition.text. This item SHOULD be populated unless the information is available from context."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.requirements"/>            <short value="Scope and Usage this structure definition is for"/>            <definition value="Explains why this structure definition is needed and why it's been constrained as it has."/>            <comments value="This element does not describe the usage of the structure definition (that's done in comments), rather it's for traceability of *why* the element is either needed or why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this data element."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>        </element>        <element>            <path value="StructureDefinition.copyright"/>            <short value="Use and/or Publishing restrictions"/>            <definition value="A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings."/>            <alias value="License"/>            <alias value="Restrictions"/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>        </element>        <element>            <path value="StructureDefinition.code"/>            <short value="Assist with indexing and finding"/>            <definition value="A set of terms from external terminologies that may be used to assist with indexing and searching of templates."/>            <requirements value="Assist in searching for appropriate StructureDefinitions."/>            <min value="0"/>            <max value="*"/>            <type>                <code value="Coding"/>            </type>            <isSummary value="true"/>            <mapping>                <identity value="iso11179"/>                <map value="keywords"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.status"/>            <short value="draft | active | retired"/>            <definition value="The status of the StructureDefinition."/>            <requirements value="Allows filtering of StructureDefinitions that are appropriate for use vs. not."/>            <min value="1"/>            <max value="1"/>            <type>                <code value="code"/>            </type>            <isModifier value="true"/>            <isSummary value="true"/>            <binding>                <name value="ConformanceResourceStatus"/>                <strength value="required"/>                <description value="The lifecycle status of a Value Set or Concept Map"/>                <valueSetReference>                    <reference value="http://hl7.org/fhir/vs/conformance-resource-status"/>                </valueSetReference>            </binding>            <mapping>                <identity value="iso11179"/>                <map value="Registration status"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.experimental"/>            <short value="If for testing purposes, not real usage"/>            <definition value="This StructureDefinition was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage."/>            <requirements value="Allows filtering of StructureDefinitions that are appropriate for use vs. not."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="boolean"/>            </type>            <isSummary value="true"/>            <mapping>                <identity value="iso11179"/>                <map value="Registration status"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.date"/>            <short value="Date for this version of the StructureDefinition"/>            <definition value="The date that this version of the StructureDefinition was published."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="dateTime"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.fhirVersion"/>            <short value="FHIR Version this StructureDefinition targets"/>            <definition value="The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 0.5.0 for this version."/>            <comments value="A StructureDefinition does not need to specify the target it applies to,as StructureDefinitions will often be valid across multiple versions of FHIR. FHIR tooling can determine whether a StructureDefinition is consistent with a particular StructureDefinition if desired."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="id"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.mapping"/>            <short value="External specification that the content is mapped to"/>            <definition value="An external specification that the content is mapped to."/>            <min value="0"/>            <max value="*"/>            <constraint>                <key value="sdf-2"/>                <severity value="error"/>                <human value="Must have at a name or a uri (or both)"/>                <xpath value="exists(f:uri) or exists(f:name)"/>            </constraint>        </element>        <element>            <path value="StructureDefinition.mapping.identity"/>            <short value="Internal id when this mapping is used"/>            <definition value="An Internal id that is used to identify this mapping set when specific mappings are made."/>            <comments value="The specification is described once, with general comments, and then specific mappings are made that reference this declaration."/>            <min value="1"/>            <max value="1"/>            <type>                <code value="id"/>            </type>        </element>        <element>            <path value="StructureDefinition.mapping.uri"/>            <short value="Identifies what this mapping refers to"/>            <definition value="An absolute URI that identifies the specification that this mapping is expressed to."/>            <comments value="A formal identity for the specification being mapped to helps with identifying maps consistently."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="uri"/>            </type>            <condition value="sdf-2"/>        </element>        <element>            <path value="StructureDefinition.mapping.name"/>            <short value="Names what this mapping refers to"/>            <definition value="A name for the specification that is being mapped to."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>            <condition value="sdf-2"/>        </element>        <element>            <path value="StructureDefinition.mapping.comments"/>            <short value="Versions, Issues, Scope limitations etc"/>            <definition value="Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="string"/>            </type>        </element>        <element>            <path value="StructureDefinition.type"/>            <short value="type | resource | constraint | extension"/>            <definition value="Defines the type of structure that this definition is describing."/>            <min value="1"/>            <max value="1"/>            <type>                <code value="code"/>            </type>            <isSummary value="true"/>            <binding>                <name value="StructureDefinitionType"/>                <strength value="required"/>                <description value="Defines the type of structure that a definition is describing"/>                <valueSetReference>                    <reference value="http://hl7.org/fhir/vs/structure-definition-type"/>                </valueSetReference>            </binding>        </element>        <element>            <path value="StructureDefinition.abstract"/>            <short value="Whether the structure is abstract"/>            <definition value="Whether structure this definition describes is abstract or not - that is, whether an actual exchanged item can ever be of this type."/>            <comments value="Abstract Resources cannot be instantiated - a concrete sub-type must be used. Abstract datatypes and extensions cannot be used in an instance. Flagging a constraint structure as abstract conveys design intent but makes no difference to how the structure definition is handled. Note that inline declared elements that are given the type 'Element' in the profile, but have children described, are anonymous concrete types that specialise Element."/>            <min value="1"/>            <max value="1"/>            <type>                <code value="boolean"/>            </type>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.contextType"/>            <short value="resource | datatype | mapping | extension"/>            <definition value="If this is an extension, Identifies the context within FHIR resources where the extension can be used."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="code"/>            </type>            <condition value="sdf-5"/>            <isSummary value="true"/>            <binding>                <name value="ExtensionContext"/>                <strength value="required"/>                <description value="How an extension context is interpreted"/>                <valueSetReference>                    <reference value="http://hl7.org/fhir/vs/extension-context"/>                </valueSetReference>            </binding>        </element>        <element>            <path value="StructureDefinition.context"/>            <short value="Where the extension can be used in instances"/>            <definition value="Identifies the types of resource or data type elements to which the extension can be applied."/>            <comments value="If the context is an element that can have multiple types, then use (e.g.) value[x] if the extension works on all choice types, or otherwise an enumeration of explicitly named elements if not. Note that a context of 'string' doesn't mean that the extension can be used with one of the string patterns such as 'id' etc."/>            <min value="0"/>            <max value="*"/>            <type>                <code value="string"/>            </type>            <condition value="sdf-5"/>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.base"/>            <short value="Structure that this set of constraints applies to"/>            <definition value="An absolute URI that is the base structure from which this set of constraints is derived."/>            <comments value="If differential constraints are specified in this structure, they are applied to the base in a 'differential' fashion. If there is no base, then the differential constraints cannot be provided (snapshot only). Differential structures are useful for the editing perspective, and snapshot structures are suitable for operational use. The FHIR Project provides a number of tools/services to populate snaphots from differential constraints."/>            <min value="0"/>            <max value="1"/>            <type>                <code value="uri"/>            </type>            <condition value="sdf-4"/>            <isSummary value="true"/>        </element>        <element>            <path value="StructureDefinition.snapshot"/>            <short value="Snapshot view of the structure"/>            <definition value="A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition."/>            <min value="0"/>            <max value="1"/>            <condition value="sdf-6"/>            <constraint>                <key value="sdf-1"/>                <severity value="error"/>                <human value="Element paths must be unique - or not (LM)"/>                <xpath value="count(f:element) &gt;= count(distinct-values(f:element/f:path/@value))"/>            </constraint>            <constraint>                <key value="sdf-3"/>                <severity value="error"/>                <human value="If a structure is a snapshot, then each element definition must have a formal definition, and cardinalities"/>                <xpath value="exists(f:base) or (count(f:element) = count(f:element[exists(f:definition) and exists(f:min) and exists(f:max)]))"/>            </constraint>        </element>        <element>            <path value="StructureDefinition.snapshot.element"/>            <short value="Definition of elements in the resource (if no StructureDefinition)"/>            <definition value="Captures constraints on each element within the resource."/>            <min value="1"/>            <max value="*"/>            <type>                <code value="ElementDefinition"/>            </type>            <condition value="sdf-3"/>            <mapping>                <identity value="iso11179"/>                <map value="--"/>            </mapping>        </element>        <element>            <path value="StructureDefinition.differential"/>            <short value="Differential view of the structure"/>            <definition value="A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies."/>            <min value="0"/>            <max value="1"/>            <condition value="sdf-6"/>        </element>        <element>            <path value="StructureDefinition.differential.element"/>            <short value="Definition of elements in the resource (if no StructureDefinition)"/>            <definition value="Captures constraints on each element within the resource."/>            <min value="1"/>            <max value="*"/>            <type>                <code value="ElementDefinition"/>            </type>            <mapping>                <identity value="iso11179"/>                <map value="--"/>            </mapping>        </element>    </differential></StructureDefinition>";
		System.out.println("\n*-* base64DecodedStr for testStr6 is: \n---1." + Base64Str.getDecodedString(testStr6));
		
//		String testStr2 = "<Cell column=\"Y2ZhOmFkZHJlc3M=\" timestamp=\"1459266488209\"\\>VGV4YXM=</Cell>"; //"Hello World!";
//		byte[]   bytesEncoded2 = testStr2 .getBytes();		
//		
//		byte[] valueDecoded2= Base64.decodeBase64(bytesEncoded2);
//		System.out.println("Decoded value is " + new String(valueDecoded2));
//		
//		
//		ByteArrayInputStream bais = new ByteArrayInputStream(bytesEncoded2);
//	    InputStream b64is = MimeUtility.decode(bais, "base64");
//	    byte[] tmp = new byte[bytesEncoded2.length];
//	    int n = b64is.read(tmp);
//	    byte[] res = new byte[n];
//	    System.arraycopy(tmp, 0, res, 0, n);
	}

}
